@using MongoDB.Bson;
@using Realms;
@using Realms.Sync;
@inject Data.Login l;
@using HeyRed.MarkdownSharp;

<div>
    @if (kt != null)
    {
        <label>Name</label>
        <input type="text" value="@kt.Name" @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ kt.Name = __e.Value.ToString(); });})" class="form-control" />

        <label>SF Link</label>
        <input type="text" value="@kt.Link"  @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ kt.Link = __e.Value.ToString(); });})" class="form-control" />

        <label>POP Link</label>
        <input type="text" value="@kt.POP"  @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ kt.POP = __e.Value.ToString(); });})" class="form-control" />

        <label>People</label>
        <input type="text" value="@kt.Team"  @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ kt.Team = __e.Value.ToString(); });})" class="form-control" />

        <label>NTSE</label>
        <input type="text" value="@kt.NTSE"  @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ kt.NTSE = __e.Value.ToString(); });})" class="form-control" />

        <label>Notes</label>
        @if(showNotesEditable || (@kt.Note == null) || (kt.Note.Length == 0)){
            <textarea rows="5" @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ kt.Note = __e.Value.ToString(); });})" class="form-control" value="@kt.Note"></textarea>
        } else {
            <div @onclick="() => { showNotesEditable = true; }">
                @notesInMarkdown
            </div>
        }
        <label>Stage</label>
        <select id="ddl_stage" name="ddl_stage" class="form-control"   @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ kt.Stage = __e.Value.ToString(); });})" value="@kt.Stage">
            @foreach(var o in Data.DDL_Stage.Stages) {
                <option value="@o.Value">@o.Key</option>
            }
        </select>

        <label>Color</label>
        <select id="ddl_color" name="ddl_color" class="form-control"  @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ kt.Color = __e.Value.ToString(); });})" value="@kt.Color">
            @foreach(var o in Data.DDL_Color.Colors) {
                <option value="@o.Value">@o.Key</option>
            }
        </select>

        <br>
        <div class="row">
            <div class="col-sm-8"><button class="btn btn-primary btn-lg" @onclick="Save" style="width:100%;">Save</button></div>
            <div class="col-sm-1">&nbsp;</div>
            <div class="col-sm-3"><button class="btn btn-danger btn-lg" @onclick="Delete" style="width:100%;"><span class="oi oi-trash"></span></button></div>
        </div>
        
    }
</div>

@code {
    [Parameter]
    public string Id { 
        get { return _id; }
        set {
            if(value != _id) {
                _id = value;
                    InvokeAsync(async() => await BuildForm());
            }
        }
    }

    [Parameter] 
    public EventCallback<bool> HasClosed { get; set; }

    private string _id {get;set;} 


    private Data.KanbanTask kt = null;
    private MarkupString notesInMarkdown;
    private bool showNotesEditable = false;

    protected async Task BuildForm()
    {
        if (l.IsLoggedIn.Equals(true) && (_id != null))
        {
            showNotesEditable = false;
            kt = l.realm.All<Data.KanbanTask>().FirstOrDefault(t => t.Id == MongoDB.Bson.ObjectId.Parse(_id));
            Markdown mark = new Markdown();
            notesInMarkdown = (MarkupString)mark.Transform(kt.Note);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await BuildForm();
    }

    private async Task Save()
    {
        if (l.IsLoggedIn.Equals(true))
        {
            l.realm.Write(() =>
            {
                l.realm.Add(kt);
            });
        }
        await HasClosed.InvokeAsync(true);
    }

    private async Task Delete()
    {
        if (l.IsLoggedIn.Equals(true))
        {
            l.realm.Write(() =>
            {
                l.realm.Remove(kt);
                kt = null;
            });
        }
        await HasClosed.InvokeAsync(true);

    }
}

