@page "/services"
@using MongoDB.Bson;
@using Realms;
@using Realms.Sync;
@inject Data.Login l;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;

<div class="content px-4">

    @if (allServices != null)
    {
        <div class="row" style="margin-bottom:30px;">
            <input type="text" @bind="search" class="form-control" style="width:50%;margin-right:20px;" /> 
            <button @onclick="() => RunSearch(search)" class="btn btn-primary"><span class="oi oi-magnifying-glass"></span></button>
        </div>

        <div class="row">
            <div class="col-sm-8">
                    <h2 class="kanbancolumn">Services</h2>
                    <div class="d-flex flex-wrap">
                        @foreach (var c in allServices.OrderBy(c => c.Name))
                        {
                            <div class="card" style="width: 18rem;float:left;margin:10px;">
                                <div class="card-body">
                                    <h5 class="card-title" style="border-top: 2px solid @c.Color">@c.Name</h5>
                                    <h6 class="card-subtitle mb-2 text-muted">@c.Company</h6>
                                    @if(c.NTSE != null) {
                                        <h6 class="card-subtitle mb-2 text-muted"><b>NTSE:</b> <i>@c.NTSE</i></h6>
                                    }
                                    @if (c.Link != null)
                                    {
                                        <a href=@c.Link target="_blank" title="Link" class="card-link"><span class="oi oi-link-intact"></span></a>
                                    }
                                <a @onclick="() => EditCard(c)" title="Edit" class="card-link"><span class="oi oi-pencil"></span></a>
                                </div>
                            </div>
                        }
                    </div>
                    <button @onclick="() => NewCard()" class="btn new-button btn-sm" style="width: 100%; margin-top:20px;"><span class="oi oi-plus"></span></button>
            </div>

            <div class="col-sm-4">
                @if(editId != null) {
                    <EditCloudService Id="@editId" HasClosed=@EditModalHasClosed />
                }
            </div>
        </div>
    }
</div>

<div class="modal" id="ctr_newmodal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">New Card</h5>
        <button @onclick="(e=> NewModalHasClosed(true))" class="close" >
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <NewCloudService HasClosed=@NewModalHasClosed />
      </div>
    </div>
  </div>
</div>

@code {
    private IQueryable<Data.CloudService> allServices = null;

    private string editId = null;
    private string search ="";

    private async void RunSearch(string s) {
        await JSRuntime.InvokeVoidAsync("RunSearch", s);
    }

    private async void NewModalHasClosed(bool closed)
    {
        StateHasChanged();
        allServices = l.realm.All<Data.CloudService>();
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("closeNewModal");
    }

    private async void EditModalHasClosed(bool closed)
    {
        StateHasChanged();
        allServices = l.realm.All<Data.CloudService>();
    }

    protected override async Task OnInitializedAsync()
    {
        if (l.IsLoggedIn.Equals(false))
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {

            allServices = l.realm.All<Data.CloudService>();
        }

    }

    private async Task EditCard(Data.CloudService c)
    {
        editId = c.Id.ToString();
        StateHasChanged();
    }

    private async Task NewCard()
    {
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("openNewModal");
    }


}

