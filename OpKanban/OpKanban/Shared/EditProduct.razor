@using MongoDB.Bson;
@using Realms;
@using Realms.Sync;
@inject Data.Login l;

<div>
    @if (p != null)
    {
        <label>Name</label>
        <input type="text" value="@p.Name" @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ p.Name = __e.Value.ToString(); });})" class="form-control" />

        <br>
        <div class="row">
            <div class="col-sm-8"><button class="btn btn-primary btn-lg" @onclick="Save" style="width:100%;">Save</button></div>
            <div class="col-sm-1">&nbsp;</div>
            <div class="col-sm-3"><button class="btn btn-danger btn-lg" @onclick="Delete" style="width:100%;"><span class="oi oi-trash"></span></button></div>
        </div>
        
    }
</div>

@code {
    [Parameter]
    public string Id { 
        get { return _id; }
        set {
            if(value != _id) {
                _id = value;
                    InvokeAsync(async() => await BuildForm());
            }
        }
    }

    [Parameter] 
    public EventCallback<bool> HasClosed { get; set; }

    private string _id {get;set;} 


    private Data.Product p = null;

    protected async Task BuildForm()
    {
        if (l.IsLoggedIn.Equals(true) && (_id != null))
        {
            p = l.realm.All<Data.Product>().FirstOrDefault(t => t.Id == MongoDB.Bson.ObjectId.Parse(_id));
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await BuildForm();
    }

    private async Task Save()
    {
        if (l.IsLoggedIn.Equals(true))
        {
            l.realm.Write(() =>
            {
                l.realm.Add(p);
            });
        }
        await HasClosed.InvokeAsync(true);
    }

    private async Task Delete()
    {
        if (l.IsLoggedIn.Equals(true))
        {
            l.realm.Write(() =>
            {
                l.realm.Remove(p);
                p = null;
            });
        }
        await HasClosed.InvokeAsync(true);

    }
}

