@using MongoDB.Bson;
@using Realms;
@using Realms.Sync;
@inject Data.Login l;

<label>Name</label>
<input type="text" @bind="txt_name" @bind:event="onchange" class="form-control" />

<label>Location</label>
<input type="text" @bind="txt_loc" @bind:event="onchange" class="form-control" />

<label>Email</label>
<input type="text" @bind="txt_email" @bind:event="onchange" class="form-control" />

<label>Phone</label>
<input type="text" @bind="txt_pn" @bind:event="onchange" class="form-control" />

<label>LinkedIn</label>
<input type="text" @bind="txt_li" @bind:event="onchange" class="form-control" />

<label>Company</label>
<input type="text" @bind="txt_comp" @bind:event="onchange" class="form-control" />

<label>Division</label>
<input type="text" @bind="txt_div" @bind:event="onchange" class="form-control" />

<label>Tenure</label>
<input type="text" @bind="txt_tenure" @bind:event="onchange" class="form-control" />

<label>Notes</label>
<textarea rows="3" class="form-control" @bind="txt_note" @bind:event="onchange" ></textarea>

<label>Family</label>
<textarea rows="3" class="form-control" @bind="txt_fam" @bind:event="onchange" ></textarea>

<label>Interests</label>
<textarea rows="3" class="form-control" @bind="txt_int" @bind:event="onchange" ></textarea>

<label>Champion Status</label>
<select id="ddl_champ" name="ddl_champ" class="form-control" @bind="ddl_champ">
    @foreach(var o in Data.DDL_Champs.Statuses) {
        <option value="@o.Value">@o.Key</option>
    }
</select>

<label>Color</label>
<select id="ddl_color" name="ddl_color" class="form-control" @bind="ddl_color">
    @foreach(var o in Data.DDL_Color.Colors) {
        <option value="@o.Value">@o.Key</option>
    }
</select>

<br>
<button class="btn btn-lg btn-primary" @onclick="Insert" style="width:100%;">Track New Contact</button>

@code {

    [Parameter] 
    public EventCallback<bool> HasClosed { get; set; }

    private string txt_name, txt_email, txt_note, ddl_champ, ddl_color, txt_fam, txt_int, txt_div, txt_comp, txt_pn, txt_loc, txt_li, txt_tenure;

    protected override async Task OnInitializedAsync()
    {
        ddl_color = "#E51400";
        StateHasChanged();
    }

    private async Task Insert()
    {
        if (l.IsLoggedIn.Equals(true))
        {
            Data.Contact c = new Data.Contact();
            c.Name = txt_name;
            c.Email = txt_email;
            c.Note = txt_note;
            c.ChampionStatus = ddl_champ;
            c.Color = ddl_color;
            c.Family = txt_fam;
            c.Interests = txt_int;
            c.Partition = l.partition;
            c.Division = txt_div;
            c.Company = txt_comp;
            c.Phone = txt_pn;
            c.Location = txt_loc;
            c.Tenure = txt_tenure;
            c.LinkedIn = txt_li;

            if((c.ChampionStatus != "Not a target") && (c.ChampionStatus != "EB")) {
                c.TCBActions = "### Build Actions\n### Test Actions\n### Plan Timeline\n";
            }

            l.realm.Write(() =>
            {
                l.realm.Add(c);
            });

            await HasClosed.InvokeAsync(true);
        }

    }
}

