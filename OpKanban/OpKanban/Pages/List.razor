@page "/list"
@using MongoDB.Bson;
@using Realms;
@using Realms.Sync;
@inject Data.Login l;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="content px-4">

    @if (allTasks != null)
    {
        <div class="row" style="margin-bottom:30px;">
            <input type="text" @bind="search" class="form-control" style="width:50%;margin-right:20px;" /> 
            <button @onclick="() => RunSearch(search)" class="btn btn-primary"><span class="oi oi-magnifying-glass"></span></button>
        </div>

        <div class="row">
            @foreach (var c in columns)
            {
                <div class="col-md-3">
                    <h2 class="kanbancolumn"> @c</h2>
                    @foreach (var kt in allTasks.Where(k => k.Stage == @c).OrderByDescending(k => k.Color).ThenByDescending(k => k.Name))
                    {
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title" style="border-top: 2px solid @kt.Color">@kt.Name</h5>
                                @if (kt.NTSE != null)
                                {
                                    <h6 class="card-subtitle mb-2 text-muted"><b>NTSE:</b> @kt.NTSE</h6>
                                }
                                @if (kt.Team != null)
                                {
                                    <p class="card-text" style="font-size: 12px; font-style: italic;"><i>@kt.Team</i></p>
                                }
                                <a href=@kt.Link title="Salesforce Link" target="_blank" class="card-link"><span class="oi oi-dollar"></span></a>
                                @if (kt.POP != null)
                                {
                                    <a href=@kt.POP target="_blank" title="Presales Op (POP)" class="card-link"><span class="oi oi-document"></span></a>
                                }
                                @if (kt.Note != null)
                                {
                                    <a @onclick="() => EditCard(kt)" title="Edit" class="card-link"><span class="oi oi-justify-left"></span></a>
                                }
                                <a @onclick="() => EditCard(kt)" title="Edit" class="card-link"><span class="oi oi-pencil"></span></a>
                                <a @onclick="() => MoveCard(kt)" title="Move Stage" class="card-link"><span class="oi oi-caret-right"></span></a>
    </div>
                        </div>
                    }
                    <button @onclick="() => NewCard(c)" class="btn new-button btn-sm" style="width: 100%; margin-top:20px;"><span class="oi oi-plus"></span></button>
                </div>
            }

            <div class="col-md-3">
                <h2 class="kanbancolumn"> Closed</h2>
                @foreach (var kt in allTasks.Where(k => (k.Stage == "Closed Won" || k.Stage == "Closed Lost")).OrderByDescending(k => k.Color).ThenByDescending(k => k.Name))
                {
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title" style="border-top: 2px solid @kt.Color">@kt.Name</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@kt.Stage <a @onclick="() => MoveCard(kt)" title="Move Stage" class="card-link"><span class="oi oi-caret-right"></span></a></h6> 
                        </div>
                    </div>
                }
            </div>

        </div>
    }
</div>

<div class="modal" id="ctr_editmodal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Card</h5>
        <button @onclick="(e=> EditModalHasClosed(true))" class="close" >
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <EditCard Id="@editId" HasClosed=@EditModalHasClosed />
      </div>
    </div>
  </div>
</div>

<div class="modal" id="ctr_newmodal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">New Card</h5>
        <button @onclick="(e=> NewModalHasClosed(true))" class="close" >
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <NewCard Stage="@newStage" HasClosed=@NewModalHasClosed />
      </div>
    </div>
  </div>
</div>

@code {
    private IQueryable<Data.KanbanTask> allTasks = null;
    private string[] columns = { "Discovery", "Sizing", "Tech Validation" };
    private string search ="";

    private string editId = null;
    private string newStage = "Discovery";

    private async void EditModalHasClosed(bool closed)
    {
        StateHasChanged();
        allTasks = l.realm.All<Data.KanbanTask>();
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("closeEditModal");
    }
    private async void NewModalHasClosed(bool closed)
    {
        StateHasChanged();
        allTasks = l.realm.All<Data.KanbanTask>();
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("closeNewModal");
    }

    protected override async Task OnInitializedAsync()
    {
        if (l.IsLoggedIn.Equals(false))
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {

            allTasks = l.realm.All<Data.KanbanTask>();
        }

    }

    private async void RunSearch(string s) {
        await JSRuntime.InvokeVoidAsync("RunSearch", s);
    }

    private async Task MoveCard(Data.KanbanTask kt)
    {
        if (l.IsLoggedIn.Equals(false))
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            string ns = "Discovery";
            if (kt.Stage == "Discovery") { ns = "Sizing"; }
            else if (kt.Stage == "Sizing") { ns = "Tech Validation"; }
            else if (kt.Stage == "Tech Validation") { ns = "Closed Won"; }
            else if (kt.Stage == "Closed Won") { ns = "Closed Lost"; }

            l.realm.Write(() =>
            {
                kt.Stage = ns;
            });

            allTasks = l.realm.All<Data.KanbanTask>();
        }
    }

    private async Task EditCard(Data.KanbanTask kt)
    {
        editId = kt.Id.ToString();
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("openEditModal");
    }

    private async Task NewCard(string stage)
    {
        newStage = stage;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("openNewModal");
    }


}

