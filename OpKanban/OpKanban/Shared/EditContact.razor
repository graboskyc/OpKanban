@using MongoDB.Bson;
@using Realms;
@using Realms.Sync;
@inject Data.Login l;

<div class="edit-col">
    @if (c != null)
    {
        <label>Name</label>
        <input type="text" value="@c.Name" @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ c.Name = __e.Value.ToString(); });})" class="form-control" />

        <label>Location</label>
        <input type="text" value="@c.Location"  @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ c.Location = __e.Value.ToString(); });})" class="form-control" />

        <label>Email</label>
        <input type="text" value="@c.Email"  @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ c.Email = __e.Value.ToString(); });})" class="form-control" />

        <label>Phone</label>
        <input type="text" value="@c.Phone"  @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ c.Phone = __e.Value.ToString(); });})" class="form-control" />

        <label>LinkedIn</label>
        <input type="text" value="@c.LinkedIn"  @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ c.LinkedIn = __e.Value.ToString(); });})" class="form-control" />

        <label>Company</label>
        <input type="text" value="@c.Company"  @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ c.Company = __e.Value.ToString(); });})" class="form-control" />

        <label>Division</label>
        <input type="text" value="@c.Division"  @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ c.Division = __e.Value.ToString(); });})" class="form-control" />

        <label>Tenure</label>
        <input type="text" value="@c.Tenure"  @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ c.Tenure = __e.Value.ToString(); });})" class="form-control" />

        <label>Notes</label>
        <textarea rows="4" @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ c.Note = __e.Value.ToString(); });})" class="form-control" value="@c.Note"></textarea>

        <label>Family</label>
        <textarea rows="3" @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ c.Family = __e.Value.ToString(); });})" class="form-control" value="@c.Family"></textarea>

        <label>Interests</label>
        <textarea rows="3" @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ c.Interests = __e.Value.ToString(); });})" class="form-control" value="@c.Interests"></textarea>

        <label>Champion Status</label>
        <select id="ddl_champ" name="ddl_champ" class="form-control" @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ c.ChampionStatus = __e.Value.ToString(); });})" value="@c.ChampionStatus">
            @foreach(var o in Data.DDL_Champs.Statuses) {
                <option value="@o.Value">@o.Key</option>
            }
        </select>

        <label>Color</label>
        <select id="ddl_color" name="ddl_color" class="form-control"  @onchange="@((ChangeEventArgs __e) => { l.realm.Write(() =>{ c.Color = __e.Value.ToString(); });})" value="@c.Color">
            @foreach(var o in Data.DDL_Color.Colors) {
                <option value="@o.Value">@o.Key</option>
            }
        </select>

        <br>
        <div class="row">
            <div class="col-sm-8"><button class="btn btn-primary btn-lg" @onclick="Save" style="width:100%;">Save</button></div>
            <div class="col-sm-1">&nbsp;</div>
            <div class="col-sm-3"><button class="btn btn-danger btn-lg" @onclick="Delete" style="width:100%;"><span class="oi oi-trash"></span></button></div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { 
        get { return _id; }
        set {
            if(value != _id) {
                _id = value;
                    InvokeAsync(async() => await BuildForm());
            }
        }
    }

    [Parameter] 
    public EventCallback<bool> HasClosed { get; set; }

    private string _id {get;set;} 


    private Data.Contact c = null;

    protected async Task BuildForm()
    {
        if (l.IsLoggedIn.Equals(true) && (_id != null))
        {
            c = l.realm.All<Data.Contact>().FirstOrDefault(t => t.Id == MongoDB.Bson.ObjectId.Parse(_id));
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await BuildForm();
    }

    private async Task Save()
    {
        if (l.IsLoggedIn.Equals(true))
        {
            l.realm.Write(() =>
            {
                l.realm.Add(c);
            });
        }
        await HasClosed.InvokeAsync(true);
    }

    private async Task Delete()
    {
        if (l.IsLoggedIn.Equals(true))
        {
            l.realm.Write(() =>
            {
                l.realm.Remove(c);
                c = null;
            });
        }
        await HasClosed.InvokeAsync(true);

    }
}

