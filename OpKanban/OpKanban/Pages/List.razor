@page "/list"
@page "/ops"
@using MongoDB.Bson;
@using Realms;
@using Realms.Sync;
@inject Data.Login l;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="content px-4">

    @if (allTasks != null)
    {
        <div class="row">
            <div class="col-md-3">Search Cards</div>
            <div class="col-md-1">&nbsp;</div>
            <div class="col-md-3">Filter</div>
            <div class="col-md-2">Hide Closed</div>
            <div class="col-md-3">Product</div>
        </div>
        <div class="row" style="margin-bottom:30px;">
            <div class="col-md-3">
                <input type="text" @bind="search" class="form-control" /> 
            </div>
            <div class="col-md-1">
                <button @onclick="() => RunSearch(search)" class="btn btn-primary"><span class="oi oi-magnifying-glass"></span></button>
            </div>
            
            <div class="col-md-3">
                <select id="ddl_color" name="ddl_color" class="form-control" value="@ddl_color" @onchange="@((ChangeEventArgs __e) => { QueryDB(color: __e.Value.ToString() ); })">
                    @if(colorsInUse != null) {
                        foreach(var o in colorsInUse) {
                            <option value="@o.Value">@o.Key</option>
                        }
                    }
                </select>
            </div>

            <div class="col-md-2">
                <select id="ddl_hideClosed" name="ddl_hideClosed" class="form-control" value="@ddl_hideClosed" @onchange="@((ChangeEventArgs __e) => { HideClosed(bool.Parse(__e.Value.ToString())); })">
                    <option value="true">Hide</option>
                    <option value="false">Show</option>
                </select>
            </div>

            <div class="col-md-3">
                <select id="ddl_prod" name="ddl_prod" class="form-control" value="@ddl_prod" @onchange="@((ChangeEventArgs __e) => { QueryDB(product: __e.Value.ToString()); })">
                    <option value="All">All</option>
                    @foreach(var p in prodList) {
                        <option value="@p.Id.ToString()">@p.Name</option>
                    }
                </select>
            </div>
        </div>

        <div class="row">
            @foreach (var c in columns)
            {
                <div class="@colWidthClass">
                    <h2 class="kanbancolumn"> @c</h2>
                    @foreach (var kt in allTasks.Where(k => k.Stage == @c).OrderByDescending(k => k.Color).ThenByDescending(k => k.Name))
                    {
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title" style="border-top: 2px solid @kt.Color">@kt.Name</h5>
                                @if (kt.NTSE != null)
                                {
                                    <h6 class="card-subtitle mb-2 text-muted"><b>NTSE:</b> @kt.NTSE</h6>
                                }
                                @if (kt.Product != null)
                                {
                                    <h6 class="card-subtitle mb-2 text-muted">@kt.Product.Name</h6>
                                }
                                @if (kt.Team != null)
                                {
                                    <p class="card-text" style="font-size: 12px; font-style: italic;"><i>@kt.Team</i></p>
                                }
                                <a href=@kt.Link title="Salesforce Link" target="_blank" class="card-link"><span class="oi oi-dollar"></span></a>
                                @if (kt.POP != null)
                                {
                                    <a href=@kt.POP target="_blank" title="Presales Op (POP)" class="card-link"><span class="oi oi-document"></span></a>
                                }
                                @if (kt.Note != null)
                                {
                                    <a @onclick="() => EditCard(kt)" title="Edit" class="card-link"><span class="oi oi-justify-left"></span></a>
                                }
                                <a @onclick="() => EditCard(kt)" title="Edit" class="card-link"><span class="oi oi-pencil"></span></a>
                                <a @onclick="() => MoveCard(kt)" title="Move Stage" class="card-link"><span class="oi oi-caret-right"></span></a>
    </div>
                        </div>
                    }
                    <button @onclick="() => NewCard(c)" class="btn new-button btn-sm" style="width: 100%; margin-top:20px;"><span class="oi oi-plus"></span></button>
                </div>
            }

            @if(!bool.Parse(ddl_hideClosed)) {
                <div class="col-md-2">
                    <h2 class="kanbancolumn"> Closed</h2>
                    @foreach (var kt in allTasks.Where(k => (k.Stage == "Closed Won" || k.Stage == "Closed Lost")).OrderByDescending(k => k.Color).ThenByDescending(k => k.Name))
                    {
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title" style="border-top: 2px solid @kt.Color"><a href=@kt.Link title="Salesforce Link" target="_blank" class="card-link">@kt.Name</a></h5>
                                <h6 class="card-subtitle mb-2 text-muted">@kt.Stage <a @onclick="() => MoveCard(kt)" title="Move Stage" class="card-link"><span class="oi oi-caret-right"></span></a></h6> 
                            </div>
                        </div>
                    }
                </div>
            }

        </div>
    }
</div>

<div class="modal" id="ctr_editmodal" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Card</h5>
        <button @onclick="(e=> EditModalHasClosed(true))" class="close" >
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <EditCard Id="@editId" HasClosed=@EditModalHasClosed />
      </div>
    </div>
  </div>
</div>

<div class="modal" id="ctr_newmodal" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">New Card</h5>
        <button @onclick="(e=> NewModalHasClosed(true))" class="close" >
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <NewCard Stage="@newStage" HasClosed=@NewModalHasClosed />
      </div>
    </div>
  </div>
</div>

@code {
    private IQueryable<Data.KanbanTask> allTasks = null;
    private string[] columns = { "Discovery", "Sizing", "Tech Validation", "Contract/Paper" };
    private string search ="";

    private string editId = null;
    private string newStage = "Discovery";
    private string ddl_color = "All";
    private string ddl_prod = "All";
    private List<Data.DDLOption> colorsInUse = new List<Data.DDLOption>();
    private string ddl_hideClosed = "true";
    private string colWidthClass = "col-md-3";
    private List<Data.Product> prodList = null;

    private async void QueryDB(string color = null, string product = null) {
        if(color != null) {
            ddl_color = color;
        }

        if(product != null) {
            ddl_prod = product;
        }

        StateHasChanged();
        if((ddl_color == "All") && (ddl_prod == "All")) {
            allTasks = l.realm.All<Data.KanbanTask>();
            foreach (var c in allTasks.OrderBy(c => c.Color)) {
                if(!colorsInUse.Any(i => i.Value == c.Color)) {
                    string key = Data.DDL_Color.Colors.FirstOrDefault(ddl => ddl.Value == c.Color).Key;
                    colorsInUse.Add(new Data.DDLOption{Key = key, Value = c.Color});
                }
            }
        } else if (ddl_prod == "All") {
            allTasks = l.realm.All<Data.KanbanTask>().Where(k => k.Color == ddl_color);
        } else if(ddl_color == "All") {
            Data.Product refProduct = l.realm.All<Data.Product>().FirstOrDefault(p => p.Id == MongoDB.Bson.ObjectId.Parse(ddl_prod));
            allTasks = l.realm.All<Data.KanbanTask>().Where(k => k.Product == refProduct);
        } else {
            Data.Product refProduct = l.realm.All<Data.Product>().FirstOrDefault(p => p.Id == MongoDB.Bson.ObjectId.Parse(ddl_prod));
            allTasks = l.realm.All<Data.KanbanTask>().Where(k => ( k.Product == refProduct && k.Color == ddl_color));
        }
        StateHasChanged();
    }

    private void HideClosed(bool isHidden) {
        ddl_hideClosed = isHidden.ToString().ToLower();
        if(isHidden) {
            colWidthClass = "col-md-3";
        } else {
            colWidthClass = "col-md-2";
        }
    }

    private async void EditModalHasClosed(bool closed)
    {
        QueryDB();
        await JSRuntime.InvokeVoidAsync("closeEditModal");
    }
    private async void NewModalHasClosed(bool closed)
    {
        QueryDB();
        await JSRuntime.InvokeVoidAsync("closeNewModal");
    }

    protected override async Task OnInitializedAsync()
    {
        colorsInUse.Add(new Data.DDLOption(){Key = "All", Value="All"});
        if (l.IsLoggedIn.Equals(false))
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            prodList = l.realm.All<Data.Product>().OrderBy(p => p.Name).ToList();
            QueryDB();
        }

    }

    private async void RunSearch(string s) {
        await JSRuntime.InvokeVoidAsync("RunSearch", s);
    }

    private async Task MoveCard(Data.KanbanTask kt)
    {
        if (l.IsLoggedIn.Equals(false))
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            string ns = "Discovery";
            if (kt.Stage == "Discovery") { ns = "Sizing"; }
            else if (kt.Stage == "Sizing") { ns = "Tech Validation"; }
            else if (kt.Stage == "Tech Validation") { ns = "Contract/Paper"; }
            else if (kt.Stage == "Contract/Paper") { ns = "Closed Won"; }
            else if (kt.Stage == "Closed Won") { ns = "Closed Lost"; }

            l.realm.Write(() =>
            {
                kt.Stage = ns;
            });

            QueryDB();
        }
    }

    private async Task EditCard(Data.KanbanTask kt)
    {
        editId = kt.Id.ToString();
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("openEditModal");
    }

    private async Task NewCard(string stage)
    {
        newStage = stage;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("openNewModal");
    }


}

